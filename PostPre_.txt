import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.unit.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.ObjectMapper; 

Logger log = LoggerFactory.getLogger(getClass());

log.info("@@@uIT_111_Service_Validation_Scripts_For_Update> Check_Is_OpEx_Review_Needed START==========>>>>>>>" );

/**
DELETE THESE LINES
**/
def preServiceIN = execution.getVariable("preServiceIN");
def postServiceIN = execution.getVariable("postServiceIN");
def isNewForm = false;


log.info("@@@ preService  = "+ preServiceIN);
log.info("@@@ postService  = "+ postServiceIN);


boolean needOpExReview = false;

//for new Service OpEx review is mandatory
if(isNewForm) {
    log.info("@@@ isNewForm ="+ isNewForm);
    needOpExReview = true;
} else {
    needOpExReview = identifyOpExReviewNeeded(preServiceIN, postServiceIN);
}

def identifyOpExReviewNeeded(JsonNode serviceNode, JsonNode postServiceNode) {
	
	//create mapper
	ObjectMapper mapper = new ObjectMapper();
	//create serviceChanges object to display changes in opEx email
	ObjectNode serviceChanges = mapper.createObjectNode();
	ArrayNode serviceAttr = serviceChanges.putArray("serviceAttr");
	ArrayNode actions = serviceChanges.putArray("actions");
	

    System.out.println("@ identifyOpExReviewNeeded START------>");
    boolean reviewRequired = false;


    //System.out.println("serviceNode=" + serviceNode);
    //System.out.println("serviceNode actions=" + serviceNode.get("actions"));


    //check serviceName 
    if(!serviceNode.get("name").asText().equals(postServiceNode.get("name").asText())) {
		System.out.println("service name changed");
        reviewRequired = true;
		serviceAttr.add(addFieldChange("Service Name",serviceNode.get("name").asText(), postServiceNode.get("name").asText()));
    }

    JsonNode preActions = serviceNode.get("actions");
    JsonNode postActions = postServiceNode.get("actions");

    for (i=0; i < preActions.size(); i++) {
        JsonNode preAction =  preActions[i];
        //System.out.println("preAction="+ preAction);
        System.out.println("preAction serviceActionId="+ preAction.get("serviceActionId").asInt());
		
		ObjectNode actionChange = mapper.createObjectNode();
		ArrayNode actionsAttr = actionChange.putArray("actionsAttr");
		actions.add(actionChange);
		


        for(j=0; j < postActions.size(); j++) {

            JsonNode postAction =  postActions[j];

            if(postAction.get("serviceActionId") == null ) {
                //this is new action added so need review
                reviewRequired = true;
                System.out.println("New action added");
            }

            //both have same serviceActionId
            if(postAction.get("serviceActionId")!=null && preAction.get("serviceActionId").asInt().equals(postAction.get("serviceActionId").asInt())) {

                System.out.println("postAction serviceActionId="+ postAction.get("serviceActionId").asInt());
				actionChange.put("serviceActionId", postAction.get("serviceActionId").asInt());
				
				//check internal flag
				if(preAction.get("internal").asBoolean() != postAction.get("internal").asBoolean()){
					System.out.println("Internal flag changed");
					actionsAttr.add(addFieldChange("Internal Flag", preAction.get("internal").asBoolean(), postAction.get("internal").asBoolean()));
					reviewRequired = true;
				}	
                //check external flag
				if(preAction.get("external").asBoolean() != postAction.get("external").asBoolean()){
					System.out.println("external flag changed");
					actionsAttr.add(addFieldChange("External Flag", preAction.get("external").asBoolean(), postAction.get("external").asBoolean()));
					reviewRequired = true;
				}
              
                //check category1Id
                if(preAction.get("category1Id") !=null && postAction.get("category1Id")!=null) {
                     if(preAction.get("category1Id").asInt() != postAction.get("category1Id").asInt()){
					    System.out.println("category1Id changed");
					    actionsAttr.add(addFieldChange("category1Id", preAction.get("category1Id").asInt(), postAction.get("category1Id").asInt()));
					    reviewRequired = true;
					 }	 
                }
				
				//check category2Id
                if(preAction.get("category2Id") !=null && postAction.get("category2Id")!=null) {
                     if(preAction.get("category2Id").asInt() != postAction.get("category2Id").asInt()){
					    System.out.println("category2Id changed");
					    actionsAttr.add(addFieldChange("category2Id", preAction.get("category2Id").asInt(), postAction.get("category2Id").asInt()));
					    reviewRequired = true;
					 }	 
                }
				
				//check category3Id
                if(preAction.get("category3Id") !=null && postAction.get("category3Id")!=null) {
                     if(preAction.get("category3Id").asInt() != postAction.get("category3Id").asInt()){
					    System.out.println("category3Id changed");
					    actionsAttr.add(addFieldChange("category3Id", preAction.get("category3Id").asInt(), postAction.get("category3Id").asInt()));
					    reviewRequired = true;
					 }	 
                }
				
                //check category3Id
                if(preAction.get("category4Id") !=null && postAction.get("category4Id")!=null) {
                     if(preAction.get("category4Id").asInt() != postAction.get("category4Id").asInt()){
					    System.out.println("category4Id changed");
					    actionsAttr.add(addFieldChange("category4Id", preAction.get("category4Id").asInt(), postAction.get("category4Id").asInt()));
					    reviewRequired = true;
					 }	 
                }
                
				//check category3Id
                if(preAction.get("actionId") !=null && postAction.get("actionId")!=null) {
                     if(preAction.get("actionId").asInt() != postAction.get("actionId").asInt()){
					    System.out.println("actionId changed");
					    actionsAttr.add(addFieldChange("actionId", preAction.get("actionId").asInt(), postAction.get("actionId").asInt()));
					    reviewRequired = true;
					 }	 
                }
                         

                //Compare entityId
                JsonNode preEntites = preAction.get("entities");
                JsonNode postEntites = postAction.get("entities");

                System.out.println("serviceActionId before calling="+ postAction.get("serviceActionId").asInt());
                reviewRequired = identifyEntityChange(preEntites, postEntites, reviewRequired, actionsAttr);
                System.out.println("serviceActionId after calling="+ postAction.get("serviceActionId").asInt());
            }
        }
    }

    System.out.println("@ identifyOpExReviewNeeded END=======================");
    execution.setVariable("serviceChanges", serviceChanges);
	System.out.println("@@@ serviceChanges=" + serviceChanges);
    return reviewRequired;
}

def identifyEntityChange(JsonNode preEntites, JsonNode postEntites, boolean reviewRequired, ArrayNode actionsAttr) {
    System.out.println(" @@@ identifyEntityChange START----->");
	ObjectMapper mapper = new ObjectMapper();
    ArrayNode deletedEntites = mapper.createArrayNode();
	ArrayNode addedEntites = mapper.createArrayNode();
  	System.out.println("@@preEntites before=" + preEntites);
	System.out.println("@@postEntites before=" + postEntites);

    for(k=0; k < postEntites.size(); k++) {
        JsonNode postEntity =  postEntites[k];
        System.out.println("preEntites.size() ="+ preEntites.size());
        for(l=0; l < preEntites.size(); l++) {
            JsonNode preEntity =  preEntites[l];
             if(preEntity.get("entity").asInt().equals(postEntity.get("entity").asInt())) {
				//if match found then remove entity from preEntites so at the end it will contain deleted entities
				preEntites.remove(l);
				System.out.println("after deleting preEntites=" + preEntites);
            }
        }
		System.out.println("Added entity="+ postEntity);
		addedEntites.add(postEntity);
    }
	
	
	
	
	
	
	
	
	deletedEntites.addAll(preEntites); 		
	System.out.println("@@deletedEntites after=" + deletedEntites);
	for(m=0; m < deletedEntites.size(); m++){
		reviewRequired = true;
		actionsAttr.add(addFieldChange("Entity", deletedEntites[m].get("entity").asText(), "DELETED"));
	}	
	System.out.println("@@addedEntites after=" + addedEntites);
	for(n=0; n < addedEntites.size(); n++){
		reviewRequired = true;
		actionsAttr.add(addFieldChange("Entity", "ADDED", addedEntites[n].get("entity").asText()));
	}
    System.out.println(" @@@ identifyEntityChange END-----");
    
	return reviewRequired;
}


def addFieldChange(String fieldName, def preVal, def postVal){
	ObjectMapper mapper = new ObjectMapper();
	ObjectNode fieldChange = mapper.createObjectNode();
	fieldChange.put("fieldName", fieldName);
	fieldChange.put("preValue", preVal); 
	fieldChange.put("postValue", postVal);
	return fieldChange;
}  

log.info("@@@ isReviewReq  = "+ needOpExReview);
flw.setOutput('isReviewReq', needOpExReview);

log.info("@@@uIT_111_Service_Validation_Scripts_For_Update> Check_Is_OpEx_Review_Needed END ==========");